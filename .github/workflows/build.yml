name: Build Multi-Platform Executables

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Enable long paths on Windows
      run: |
        git config --system core.longpaths true
    
    - name: Install dependencies (Windows-specific versions)
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6==6.7.1 PyQt6-Qt6==6.7.3 PyQt6-WebEngine==6.7.0 PyQt6-WebEngine-Qt6==6.7.3 PyQt6_sip==13.8.0
        pip install pyinstaller==6.15.0 pyinstaller-hooks-contrib==2025.8
        pip install openai anthropic google-generativeai==0.8.5
        pip install langchain langchain-core langchain-openai langchain-anthropic langchain-google-genai langchain-perplexity langchain-text-splitters
        pip install langsmith tiktoken==0.9.0
        pip install requests requests-toolbelt==1.0.0 httpx aiohttp
        pip install cryptography==42.0.8 keyring pycryptodome
        pip install pandas numpy openpyxl xlsxwriter==3.2.5
        pip install matplotlib seaborn scikit-learn astropy
        pip install python-docx==1.2.0 python-pptx==1.0.2 PyPDF2==3.0.1 lxml==6.0.0
        pip install Markdown==3.8.2 Pygments==2.19.2 pymdown-extensions==10.16.1 python-markdown-math==0.9
        pip install python-dotenv==1.1.1 PyYAML==6.0.2 tqdm==4.67.1 tenacity==9.1.2 filetype==1.2.0 regex==2024.11.6
        pip install boto3 replicate==1.0.7 SQLAlchemy==2.0.41
        pip install loguru black
    
    - name: Purge and clean build environment
      run: |
        # Remove build directories
        if (Test-Path build_windows) { Remove-Item -Recurse -Force build_windows }
        if (Test-Path dist_windows) { Remove-Item -Recurse -Force dist_windows }
        Get-ChildItem -Recurse -Directory -Filter __pycache__ | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        Get-ChildItem -Recurse -File -Filter *.pyc | Remove-Item -Force -ErrorAction SilentlyContinue
        Get-ChildItem -Recurse -File -Filter *.pyo | Remove-Item -Force -ErrorAction SilentlyContinue
        
        # Purge all caches
        if (Test-Path $env:USERPROFILE\.pyinstaller_cache) { Remove-Item -Recurse -Force $env:USERPROFILE\.pyinstaller_cache }
        pip cache purge
        python -m pip cache purge
        
        # Clear temp
        if (Test-Path $env:TEMP\pyinstaller*) { Remove-Item -Recurse -Force $env:TEMP\pyinstaller* -ErrorAction SilentlyContinue }
        
        Write-Host "✅ Purge completed"
      shell: pwsh
    
    - name: Build Windows executable
      run: |
        chcp 65001
        $env:PYTHONIOENCODING="utf-8"
        python build_mygenie.py
      shell: pwsh
    
    - name: Optimize executable size
      run: |
        if (Test-Path dist_windows\MyGenie_beta.exe) {
          Write-Host "Executable size:"
          Get-Item dist_windows\MyGenie_beta.exe | Select-Object Name, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB,2)}}
        }
      shell: pwsh
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: MyGenie_beta-Windows
        path: |
          dist_windows/MyGenie_beta.exe
          dist_windows/MyGenie_beta-Windows.zip
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies (macOS-specific versions)
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6==6.8.0 PyQt6-Qt6==6.8.2 PyQt6-WebEngine==6.8.0 PyQt6-WebEngine-Qt6==6.8.2 PyQt6_sip==13.8.0
        pip install pyinstaller==6.15.0 pyinstaller-hooks-contrib==2025.8
        pip install openai anthropic google-generativeai==0.8.5
        pip install langchain langchain-core langchain-openai langchain-anthropic langchain-google-genai langchain-perplexity langchain-text-splitters
        pip install langsmith tiktoken==0.9.0
        pip install requests requests-toolbelt==1.0.0 httpx aiohttp
        pip install cryptography==42.0.8 keyring pycryptodome
        pip install pandas numpy openpyxl xlsxwriter==3.2.5
        pip install matplotlib seaborn scikit-learn astropy
        pip install python-docx==1.2.0 python-pptx==1.0.2 PyPDF2==3.0.1 lxml==6.0.0
        pip install Markdown==3.8.2 Pygments==2.19.2 pymdown-extensions==10.16.1 python-markdown-math==0.9
        pip install python-dotenv==1.1.1 PyYAML==6.0.2 tqdm==4.67.1 tenacity==9.1.2 filetype==1.2.0 regex==2024.11.6
        pip install boto3 replicate==1.0.7 SQLAlchemy==2.0.41
        pip install loguru black
    
    - name: Purge and clean build environment
      run: |
        # Remove build directories
        rm -rf build dist __pycache__ temp_dmg
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -type f -name "*.pyc" -delete
        find . -type f -name "*.pyo" -delete
        
        # Purge all caches
        rm -rf ~/.pyinstaller_cache
        pip cache purge || true
        python -m pip cache purge || true
        
        # Clear system temp
        rm -rf /tmp/pyinstaller* 2>/dev/null || true
        
        echo "✅ Purge completed"
    
    - name: Build macOS executable
      run: |
        # Skip DMG creation in build script
        export SKIP_DMG_CREATION=1
        python build_mygenie.py
    
    - name: Strip and optimize app bundle
      run: |
        if [ -d "dist/MyGenie.app" ]; then
          echo "Original app size:"
          du -sh dist/MyGenie.app
          
          # Remove debug symbols and unnecessary files
          find dist/MyGenie.app -name "*.pyc" -delete
          find dist/MyGenie.app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find dist/MyGenie.app -name "*.a" -delete
          find dist/MyGenie.app -name "*.la" -delete
          
          # Strip binaries to reduce size
          find dist/MyGenie.app -type f \( -name "*.so" -o -name "*.dylib" \) -exec strip -x {} \; 2>/dev/null || true
          
          echo "Optimized app size:"
          du -sh dist/MyGenie.app
        fi
    
    - name: Create optimized DMG
      run: |
        if [ -d "dist/MyGenie.app" ]; then
          # Create temporary directory
          mkdir -p temp_dmg
          ditto dist/MyGenie.app temp_dmg/MyGenie.app
          ln -s /Applications temp_dmg/Applications
          
          # Create highly compressed DMG
          hdiutil create -volname "MyGenie" -srcfolder temp_dmg -ov -format UDBZ dist/MyGenie-macOS.dmg
          
          # Cleanup
          rm -rf temp_dmg
          
          echo "Final DMG size:"
          du -h dist/MyGenie-macOS.dmg
          ls -lh dist/MyGenie-macOS.dmg
        fi
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: MyGenie_beta-macOS
        path: |
          dist/MyGenie.app
          dist/MyGenie-macOS.dmg
        retention-days: 30

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: MyGenie_beta-Windows
        path: windows-build
    
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: MyGenie_beta-macOS
        path: macos-build
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-build/MyGenie_beta.exe
          windows-build/MyGenie_beta-Windows.zip
          macos-build/MyGenie-macOS.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
